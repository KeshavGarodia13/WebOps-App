<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Stock Price Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #f0f0f0;
    }
    .container {
      text-align: center;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      padding: 20px;
      max-width: 800px;
      width: 100%;
    }
    h1 {
      margin-bottom: 20px;
    }
    .chart-container {
      margin-top: 20px;
    }
    canvas {
      width: 100%;
      max-width: 700px;
      height: 400px;
      border: 1px solid #ccc;
      border-radius: 8px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Stock Price Chart</h1>
    <div class="chart-container">
      <canvas id="stockChart"></canvas>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    async function fetchStockData() {
      try {
        // Replace the API URL with your actual API endpoint
        const apiUrl = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo';
        const response = await fetch(apiUrl);
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching stock data:', error);
        return null;
      }
    }

    function formatChartData(data) {
      const timestamps = [];
      const openingPrices = [];
      const closingPrices = [];

      const sortedTimestamps = Object.keys(data).sort();

      sortedTimestamps.forEach(timestamp => {
	if (timestamp.startsWith("2009-01-30")){
        timestamps.push(timestamp);
        openingPrices.push(parseFloat(data[timestamp]['1. open']));
        closingPrices.push(parseFloat(data[timestamp]['4. close']))};
      });

      return { timestamps, openingPrices, closingPrices };
    }

    async function plotStockChartFromAPI() {
      const data = await fetchStockData();
      if (data) {
        const timeSeriesData = data["Time Series (5min)"];
        const formattedData = formatChartData(timeSeriesData);
        const ctx = document.getElementById('stockChart').getContext('2d');
        const chart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: formattedData.timestamps,
            datasets: [
              {
                label: 'Opening Price',
                data: formattedData.openingPrices,
                borderColor: 'blue',
                backgroundColor: 'rgba(0, 0, 255, 0.1)',
                borderWidth: 1
              },
              {
                label: 'Closing Price',
                data: formattedData.closingPrices,
                borderColor: 'green',
                backgroundColor: 'rgba(0, 255, 0, 0.1)',
                borderWidth: 1
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: {
                ticks: {
                  display: true
                },
                title: {
                  display: true,
                  text: 'Time'
                }
              },
              y: {
                ticks: {
                  display: true
                },
                title: {
                  display: true,
                  text: 'Price'
                }
              }
            }
          }
        });
      } else {
        console.error('Error fetching stock data. Cannot plot chart.');
      }
    }

    plotStockChartFromAPI();
  </script>
</body>
</html>
